{"version":3,"sources":["../src/functions.js"],"names":["array","len","Array","apply","map","_","i","id","x","pluck","p","arr","o","fn","cMap","splitEvery","w","a","tot","length","out","pos","got","slice","concat","last","head","tail","one","two","concatenated","arguments","isArray","join","transpose","v","intersperse","c","reduce","all","push","Either","Right","Left","EitherArray","chain","f","fold","g","inspect","log","str","console"],"mappings":";;;;;AAAO,IAAMA,wBAAQ,SAARA,KAAQ,CAACC,GAAD;AAAA,SAASC,MAAMC,KAAN,CAAY,IAAZ,EAAkBD,MAAMD,GAAN,CAAlB,EAA8BG,GAA9B,CAAkC,UAACC,CAAD,EAAIC,CAAJ;AAAA,WAAUA,CAAV;AAAA,GAAlC,CAAT;AAAA,CAAd;AACA,IAAMC,kBAAK,SAALA,EAAK,CAACC,CAAD;AAAA,SAAOA,CAAP;AAAA,CAAX;AACA,IAAMC,wBAAQ,SAARA,KAAQ,CAACC,CAAD,EAAIC,GAAJ;AAAA,SAAYA,IAAIP,GAAJ,CAAQ,UAACQ,CAAD;AAAA,WAAOA,EAAEF,CAAF,CAAP;AAAA,GAAR,CAAZ;AAAA,CAAd;AACA,IAAMP,wBAAQ,SAARA,KAAQ,CAACU,EAAD,EAAKF,GAAL;AAAA,SAAaE,GAAGV,KAAH,CAAS,IAAT,EAAeQ,GAAf,CAAb;AAAA,CAAd;AACA,IAAMG,sBAAO,SAAPA,IAAO,CAACD,EAAD;AAAA,SAAQ,UAACF,GAAD;AAAA,WAASA,IAAIP,GAAJ,CAAQS,EAAR,CAAT;AAAA,GAAR;AAAA,CAAb;AACA,IAAME,kCAAa,SAAbA,UAAa,CAACC,CAAD,EAAIC,CAAJ,EAAU;AAClC,MAAI,CAACA,CAAL,EAAQ,OAAOA,CAAP;AACR,MAAMC,MAAMD,EAAEE,MAAd;AACA,MAAIC,MAAM,EAAV;AACA,MAAIC,MAAM,CAAV;AACA,SAAOA,MAAMH,GAAb,EAAkB;AAChB,QAAII,MAAML,EAAEM,KAAF,CAAQF,GAAR,EAAaA,MAAML,CAAnB,CAAV;AACAI,UAAMA,IAAII,MAAJ,CAAWF,GAAX,CAAN;AACAD,WAAOC,IAAIH,MAAX;AACD;AACD,SAAOC,GAAP;AACD,CAXM;AAYA,IAAMK,sBAAO,SAAPA,IAAO,CAACd,GAAD;AAAA,SAASA,IAAIY,KAAJ,CAAU,CAAC,CAAX,CAAT;AAAA,CAAb;AACA,IAAMG,sBAAO,SAAPA,IAAO,CAACf,GAAD;AAAA,SAASA,IAAIY,KAAJ,CAAU,CAAV,EAAa,CAAb,CAAT;AAAA,CAAb;AACA,IAAMI,sBAAO,SAAPA,IAAO,CAAChB,GAAD;AAAA,SAASA,IAAIY,KAAJ,CAAU,CAAV,CAAT;AAAA,CAAb;AACA,IAAMC,0BAAS,SAATA,MAAS,CAAUI,GAAV,EAAeC,GAAf,EAAoB;AAAA;;AACxC,MAAMC,eAAe,YAAGN,MAAH,aAAaO,SAAb,CAArB;AACA,MAAI7B,MAAM8B,OAAN,CAAcJ,GAAd,CAAJ,EAAwB,OAAOE,YAAP;AACxB,SAAOA,aAAaG,IAAb,CAAkB,EAAlB,CAAP;AACD,CAJM;AAKA,IAAMC,gCAAY,SAAZA,SAAY,CAACvB,GAAD,EAAS;AAChC,SAAOA,IAAI,CAAJ,EAAOP,GAAP,CAAW,UAACC,CAAD,EAAIC,CAAJ,EAAU;AAC1B,WAAOK,IAAIP,GAAJ,CAAQ,UAAC+B,CAAD;AAAA,aAAOA,EAAE7B,CAAF,CAAP;AAAA,KAAR,CAAP;AACD,GAFM,CAAP;AAGD,CAJM;AAKA,IAAM8B,oCAAc,SAAdA,WAAc,CAACC,CAAD,EAAIpB,CAAJ,EAAU;AACnC,SAAOA,EAAEqB,MAAF,CAAS,UAACC,GAAD,EAAMJ,CAAN,EAAS7B,CAAT,EAAe;AAC7B,QAAIA,MAAMW,EAAEE,MAAF,GAAW,CAArB,EAAwB;AACtBoB,UAAIC,IAAJ,CAASL,CAAT;AACA,aAAOI,GAAP;AACD;AACDA,QAAIC,IAAJ,CAASL,CAAT,EAAYE,CAAZ;AACA,WAAOE,GAAP;AACD,GAPM,EAOJ,EAPI,CAAP;AAQD,CATM;;AAWA,IAAME,0BAAS,SAATA,MAAS,CAACjC,CAAD;AAAA,SAAOA,KAAK,IAAL,GAAYkC,MAAMlC,CAAN,CAAZ,GAAuBmC,KAAKnC,CAAL,CAA9B;AAAA,CAAf;AACA,IAAMoC,oCAAc,SAAdA,WAAc,CAACpC,CAAD;AAAA,SAAON,MAAM8B,OAAN,CAAcxB,CAAd,IAAmBkC,MAAMlC,CAAN,CAAnB,GAA8BmC,KAAKnC,CAAL,CAArC;AAAA,CAApB;;AAEA,IAAMkC,wBAAQ,SAARA,KAAQ,CAAClC,CAAD;AAAA,SAAQ;AAC3BqC,WAAO,eAACC,CAAD;AAAA,aAAOA,EAAEtC,CAAF,CAAP;AAAA,KADoB;AAE3BJ,SAAK,aAAC0C,CAAD;AAAA,aAAOJ,MAAMI,EAAEtC,CAAF,CAAN,CAAP;AAAA,KAFsB;AAG3BuC,UAAM,cAACD,CAAD,EAAIE,CAAJ;AAAA,aAAUA,EAAExC,CAAF,CAAV;AAAA,KAHqB;AAI3ByC,aAAS;AAAA,wBAAezC,CAAf;AAAA,KAJkB;AAK3B0C,SAAK,eAAc;AAAA,UAAbC,GAAa,uEAAP,EAAO;;AACjBC,cAAQF,GAAR,CAAYC,GAAZ,EAAiB,OAAjB,EAA0B3C,CAA1B;AACA,aAAOkC,MAAMlC,CAAN,CAAP;AACD;AAR0B,GAAR;AAAA,CAAd;;AAWA,IAAMmC,sBAAO,SAAPA,IAAO,CAACnC,CAAD;AAAA,SAAQ;AAC1BqC,WAAO,eAACC,CAAD;AAAA,aAAOH,KAAKnC,CAAL,CAAP;AAAA,KADmB;AAE1BJ,SAAK,aAAC0C,CAAD;AAAA,aAAOH,KAAKnC,CAAL,CAAP;AAAA,KAFqB;AAG1BuC,UAAM,cAACD,CAAD,EAAIE,CAAJ;AAAA,aAAUF,EAAEtC,CAAF,CAAV;AAAA,KAHoB;AAI1ByC,aAAS;AAAA,uBAAczC,CAAd;AAAA,KAJiB;AAK1B0C,SAAK,eAAc;AAAA,UAAbC,GAAa,uEAAP,EAAO;;AACjBC,cAAQF,GAAR,CAAYC,GAAZ,EAAiB,MAAjB,EAAyB3C,CAAzB;AACA,aAAOmC,KAAKnC,CAAL,CAAP;AACD;AARyB,GAAR;AAAA,CAAb","file":"functions.js","sourcesContent":["export const array = (len) => Array.apply(null, Array(len)).map((_, i) => i)\nexport const id = (x) => x\nexport const pluck = (p, arr) => arr.map((o) => o[p])\nexport const apply = (fn, arr) => fn.apply(null, arr)\nexport const cMap = (fn) => (arr) => arr.map(fn)\nexport const splitEvery = (w, a) => {\n  if (!a) return a\n  const tot = a.length\n  let out = []\n  let pos = 0\n  while (pos < tot) {\n    let got = a.slice(pos, pos + w)\n    out = out.concat(got)\n    pos += got.length\n  }\n  return out\n}\nexport const last = (arr) => arr.slice(-1)\nexport const head = (arr) => arr.slice(0, 1)\nexport const tail = (arr) => arr.slice(1)\nexport const concat = function (one, two) {\n  const concatenated = [].concat(...arguments)\n  if (Array.isArray(one)) return concatenated\n  return concatenated.join('')\n}\nexport const transpose = (arr) => {\n  return arr[0].map((_, i) => {\n    return arr.map((v) => v[i])\n  })\n}\nexport const intersperse = (c, a) => {\n  return a.reduce((all, v, i) => {\n    if (i === a.length - 1) {\n      all.push(v)\n      return all\n    }\n    all.push(v, c)\n    return all\n  }, [])\n}\n\nexport const Either = (x) => x != null ? Right(x) : Left(x)\nexport const EitherArray = (x) => Array.isArray(x) ? Right(x) : Left(x)\n\nexport const Right = (x) => ({\n  chain: (f) => f(x),\n  map: (f) => Right(f(x)),\n  fold: (f, g) => g(x),\n  inspect: () => `Right(${x})`,\n  log: (str = '') => {\n    console.log(str, 'Right', x)\n    return Right(x)\n  }\n})\n\nexport const Left = (x) => ({\n  chain: (f) => Left(x),\n  map: (f) => Left(x),\n  fold: (f, g) => f(x),\n  inspect: () => `Left(${x})`,\n  log: (str = '') => {\n    console.log(str, 'Left', x)\n    return Left(x)\n  }\n})\n"]}